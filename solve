#!/usr/bin/python3

import subprocess
import sys
import time
import io
from computing import course_data

def time_key(t):
    plus = t.index('+')
    days = t[:plus-4]
    time = t[plus-4:plus]
    dur = int(t[plus+1:])
    day_key = ''.join([ str('MTWRFSU'.index(ch)) for ch in days ])
    return (day_key[0], time, dur)

all_rooms = {
    room
        for elt in course_data.values()
        for (room, time, badness) in elt['room_times']
}
rooms_by_course = {
    course: { room for (room, time, badness) in value['room_times'] }
        for (course, value) in course_data.items()
}
courses_by_room = {
    room: { course
        for course in rooms_by_course.keys()

        if room in rooms_by_course[course]
    }
    for room in all_rooms
}
rooms_in_order = sorted(all_rooms)

all_times = {
    time
        for elt in course_data.values()
        for (room, time, badness) in elt['room_times']
}
times_by_course = {
    course: { time for (room, time, badness) in value['room_times'] }
        for (course, value) in course_data.items()
}
times_in_order = sorted(all_times, key=time_key)
time_pairs = { (x, y)
    for x in all_times
    for y in all_times

    if x < y
}

all_courses = set(course_data.keys())
course_pairs = { (x, y)
    for x in all_courses
    for y in all_courses

    if x < y
}

def parse_time(t):
    for (i, ch) in enumerate(t):
        if ch.isdigit():
            days = t[:i]
            start = int(t[i:i+2])*60 + int(t[i+2:i+4])
            end = start + int(t[i+5:])
            return (days, start, end)
    print(f'failed to parse {t}')
    sys.exit(1)
def time_days(t): return parse_time(t)[0]
def time_start(t): return parse_time(t)[1]
def time_end(t): return parse_time(t)[2]

time_starts = { (day, time_start(time))
    for time in all_times
    for day in parse_time(time)[0]
}
conflicts_by_time_start = {
    (day, start): { time
        for time in all_times

        if day in time_days(time) and time_start(time) <= start and time_end(time) > start
    }
    for (day, start) in time_starts
}

time_conflicts = { time: set() for time in all_times }
for (time_a, time_b) in time_pairs:
    days_a, start_a, end_a = parse_time(time_a)
    days_b, start_b, end_b = parse_time(time_b)
    if end_a <= start_b or end_b <= start_a: continue
    if len(set(days_a) & set(days_b)) > 0:
        time_conflicts[time_a].add(time_b)
        time_conflicts[time_b].add(time_a)

course_room_time_to_var = {}
var_to_course_room_time = {}
var_count = 0
clauses = []
constraints = []

def set_constraint(constraint):
    while len(constraints) < len(clauses):
        constraints.append(None)
    constraints[-1] = constraint

def assign_vars():
    global var_count
    for course in all_courses:
        for room in rooms_by_course[course]:
            for time in times_by_course[course]:
                var_count += 1
                course_room_time_to_var[(course, room, time)] = var_count
                var_to_course_room_time[var_count] = (course, room, time)

def exactly_one_room_and_time_per_course():
    for course in all_courses:
        lst = [course_room_time_to_var[(course, room, time)]
            for room in rooms_by_course[course]
            for time in times_by_course[course]
        ]
        clauses.append(lst)
        clauses.append(lst)
        set_constraint('<= 1')

def at_most_one_course_per_room_and_time():
    for room in all_rooms:
        for (start, overlapping) in conflicts_by_time_start.items():
            courses = { course
                for course in courses_by_room[room]

                if len(times_by_course[course] & overlapping) > 0
            }
            if len(courses) < 2: continue
            lst = [ course_room_time_to_var[(course, room, overlap)]
                for course in courses
                for overlap in (times_by_course[course] & overlapping)
            ]
            clauses.append(lst)
            set_constraint('<= 1')

taboo = set()
def at_most_one_course_per_time_conflicts(badness=None, k=None):
    global var_count
    k_vars = []

    conflicting_courses = { (x, y)
        for x in all_courses
        for y in all_courses

        if x < y and (
            badness is None and (x in course_data[y]['hard'] or y in course_data[x]['hard']) or
            badness is not None and (
                x in course_data[y]['soft'] and course_data[y]['soft'][x] == badness or
                y in course_data[x]['soft'] and course_data[x]['soft'][y] == badness
            )
        )
    }
    for (course_a, course_b) in conflicting_courses:
        start_times = (
            { (day, time_start(time))
                for time in times_by_course[course_a]
                for day in time_days(time)
            } |
            { (day, time_start(time))
                for time in times_by_course[course_b]
                for day in time_days(time)
            }
        )
        for start in start_times:
            overlapping_a = times_by_course[course_a] & conflicts_by_time_start[start]
            overlapping_b = times_by_course[course_b] & conflicts_by_time_start[start]
            lst_a = []
            lst_b = []
            for room_a in rooms_by_course[course_a]:
                lst_a.extend([ course_room_time_to_var[(course_a, room_a, time_a)]
                    for time_a in overlapping_a
                ])
            for room_b in rooms_by_course[course_b]:
                lst_b.extend([ course_room_time_to_var[(course_b, room_b, time_b)]
                    for time_b in overlapping_b
                ])
            if len(lst_a) == 0 or len(lst_b) == 0:
                continue

            lst = []
            lst.extend(lst_a)
            lst.extend(lst_b)
            if k is None:
                lst.sort()
                constraint = '<= 1'
                key = (tuple(lst), constraint)
                if key not in taboo:
                    taboo.add(key)
                    clauses.append(lst)
                    set_constraint(constraint)
            else:
                lst = [elt for elt in lst]
                lst.sort()
                constraint = '<= 2'
                key = (tuple(lst), constraint)
                if key not in taboo:
                    taboo.add(key)
                    var_count += 1
                    k_vars.append(var_count)
                    lst.append(var_count)
                    clauses.append(lst)
                    set_constraint(constraint)
    if k is not None and len(k_vars) > k:
        k_vars.sort()
        constraint = f'>= {len(k_vars)-k}'
        clauses.append(k_vars)
        set_constraint(constraint)


def anticonflict(single, group_raw):
    global var_count
    k_vars = []

    assert single in course_data
    group = { other
        for other in all_courses
        for other_raw in group_raw

        if '-' in other_raw and other == other_raw or
            '-' not in other_raw and other.startswith(other_raw + '-')
    }
    assert len(group) != 0

    for time in times_by_course[single]:
        lst = []
        for room_single in rooms_by_course[single]:
            lst.append(course_room_time_to_var[(single, room_single, time)])

        for other in group:
            for time_other in times_by_course[other]:
                if time_other == time: continue
                for room_other in rooms_by_course[other]:
                    lst.append(course_room_time_to_var[(other, room_other, time_other)])

        constraint = f'<= {len(group)}'
        clauses.append(lst)
        set_constraint(constraint)

def decode_solution(solution_list):
    solution = set(solution_list)
    placement = {}
    for ((course, room, time), var) in course_room_time_to_var.items():
        if var in solution:
            placement[course] = (room, time)
    return placement

def print_schedule(placement):
    grid = []
    for i in range(len(times_in_order) + 1):
        grid.append([''] * (len(rooms_in_order) + 1))
    for (i, room) in enumerate(rooms_in_order):
        grid[0][i+1] = room
    for (i, time) in enumerate(times_in_order):
        grid[i+1][0] = time
    for (course, (room, time)) in placement.items():
        grid[times_in_order.index(time)+1][rooms_in_order.index(room)+1] = course

    width = 1
    for time in times_in_order:
        width = max(len(time), width)
    for room in rooms_in_order:
        width = max(len(room), width)
    for course in all_courses:
        width = max(len(course), width)
    width += 2

    for (i, row) in enumerate(grid):
        div, elt = '+', '|'
        for column in row:
            div += '-'*width + '+'
            elt += f'{column:^{width}}|'
        if i == 0: print(div)
        print(elt)
        print(div)

def print_static_placement(placement):
    for (course, (room, time)) in sorted(placement.items()):
        print(f'    place(solver, "{course}", "{room}", "{time}")?;')

def make_dimacs(n_vars, clauses, constraints):
    while len(constraints) < len(clauses): constraints.append(None)
    s = 'c Timetabling problem\n'
    s += f'p cnf+ {n_vars} {len(clauses)}\n'
    for (clause, constraint) in zip(clauses, constraints):
        vars = ' '.join([str(elt) for elt in clause])
        if constraint is None:
            s += vars + ' 0\n'
        else:
            s += vars + ' ' + constraint + '\n'
    return s

def run_solver_and_gather_result(var_count, clauses, constraints):
    s = make_dimacs(var_count, clauses, constraints)

    p = subprocess.Popen(['minicard'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    (stdout, stderr) = p.communicate(input=s.encode('utf-8'))
    if stderr:
        print('error output:')
        print(stderr)
        sys.exit(1)

    is_sat = None
    solution = None
    for bline in iter(stdout.splitlines()):
        line = bline.decode('utf-8')
        if line.startswith('s'):
            if line.find('UNSATISFIABLE') >= 0:
                is_sat = False
                print(line)
            elif line.find('SATISFIABLE') >= 0:
                is_sat = True
        elif line.startswith('v '):
            solution = [int(elt.replace('x', '')) for elt in line[2:].split()]
        else:
            print(line)
    if not is_sat or solution is None:
        return None
    return solution

def main():
    assign_vars()
    n = len(clauses)
    print('assigned', var_count, 'vars')
    exactly_one_room_and_time_per_course()
    print('exactly_one_room_and_time_per_course added', len(clauses) - n)
    n = len(clauses)
    at_most_one_course_per_room_and_time()
    print('at_most_one_course_per_room_and_time added', len(clauses) - n)
    n = len(clauses)
    at_most_one_course_per_time_conflicts()
    print('hard_conflicts added', len(clauses) - n)
    n = len(clauses)
    anticonflict('CS 4600-01', ['SE 4600-01'])
    anticonflict('CS 1030-01', ['CS 1400'])
    print('anticonflict added', len(clauses) - n)
    n = len(clauses)

    print('score levels:')
    score_counts = {}
    for data in course_data.values():
        for badness in data['soft'].values():
            if badness not in score_counts: score_counts[badness] = 0
            score_counts[badness] += 1
    for (badness, k) in sorted(score_counts.items())[::-1]:
        print(f'    {badness:2}: {k}')

    soft_limits = [
        #(99, 4),
        #(60, 0),
        #(45, 4),
        #(32, 50),

        (99, 0),
        (60, 0),
        (45, 0),
        (32, 0),
        (30, 1),
    ]

    for (badness, k) in soft_limits:
        if k == 0:
            at_most_one_course_per_time_conflicts(badness)
            print(f'soft_conflicts at badness {badness} added', len(clauses) - n)
        else:
            at_most_one_course_per_time_conflicts(badness, k)
            print(f'soft_conflicts at badness {badness} allowing up to {k} added', len(clauses) - n)
        n = len(clauses)

    print('total of', n, 'clauses')

    start = time.time()
    solution = run_solver_and_gather_result(var_count, clauses, constraints)
    print(f'solver took {time.time()-start:.2f}s')
    if solution is None:
        sys.exit(1)
    print('satisfied')
    placement = decode_solution(solution)
    print_schedule(placement)
    #print_static_placement(placement)

main()
